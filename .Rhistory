learning2014_test <- read.csv("data/learning2014.csv")
setwd("~/Documents/GitHub/IODS-project")
setwd("~/Documents/GitHub/IODS-project")
learning2014 <- read.csv("data/learning2014.csv")
View(learning2014)
summary(learning2014)
setwd("~/Documents/GitHub/IODS-project")
learning2014 <- read.csv("https://github.com/BreezewindX/IODS-project/blob/master/data/learning2014.csv")
setwd("~/Documents/GitHub/IODS-project")
learning2014 <- read.csv("https://raw.githubusercontent.com/BreezewindX/IODS-project/master/data/learning2014.csv")
View(learning2014)
#Explore the data
summary(learning2014)
```{r}
?tidy
install.packages('broom')
library(broom)
learning2014 <- read.csv("https://raw.githubusercontent.com/BreezewindX/IODS-project/master/data/learning2014.csv")
summary(learning2014) %>% tidy()
install.packages("broom") # install broom for later
install.packages("broom")
library(broom)
install.packages("tidyverse")
library(tidyverse)
summary(learning2014)
library(ggplot2)
# initialize plot with data and aesthetic mapping
p1 <- ggplot(learning2014, aes(x = attitude, y = points, col=gender))
# define the visualization type (points)
p2 <- p1 + geom_point()
# draw the plot
p2
# add a regression line
p3 <- p2 + geom_smooth(method = "lm")
# add a main title and draw the plot
p4 <- p3 + ggtitle("Student's attitude versus exam points")
p4
ggplot(learning2014, aes(x = attitude, y = points, col=gender)) +
geom_point() +
geom_smooth(method = "lm") +
ggtitle("Student's attitude versus exam points")
learning2014 %>% ggplot(aes(x = attitude, y = points, col=gender)) +
geom_point() +
geom_smooth(method = "lm") +
ggtitle("Student's attitude versus exam points")
### Draw ggpairs
library(GGally)
library(ggplot2)
ggpairs(learning2014, mapping = aes(col = gender, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
install.packages("GGally")
library(GGally)
library(ggplot2)
ggpairs(learning2014, mapping = aes(col = gender, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
View(learning2014)
my_model2 <- lm(points ~ attitude + stra + surf, data = learning2014)
# print out a summary of the model
summary(my_model2)
remove(my_model2)
my_model <- lm(points ~ attitude + stra + surf, data = learning2014)
# print out a summary of the model
summary(my_model)
par(mfrow = c(2,2))
plot(my_model, which=c(1,2,5))
str(learning2014$gender="M")
str(learning2014$gender=="M")
lenght(learning2014$gender=="M")
length(learning2014$gender=="M")
length(select(learning2014$gender=="M"))
length(learning2014$gender=="M"==T))
learning2014$gender=="M"
(learning2014$gender=="M")==TRUE
levels(learning2014$gender=="M")
summary(learning2014$gender)
summary(learning2014$gender[2])
summary(learning2014$gender[,1])
summary(learning2014$gender[2,])
summary(learning2014$gender[2,0])
summary(learning2014$gender[2])
summary(learning2014$gender[1])
summary(learning2014$gender)[1]
summary(learning2014$gender)[2]
str(learning2014$gender)[2]
summary(learning2014$gender)[2]
100-0.001
new_model <- lm(points ~ attitude, data = learning2014)
# print out a summary of the model
summary(new_model)
my_model <- lm(points ~ attitude + stra + surf, data = learning2014)
# print out a summary of the model
summary(my_model)
# draw diagnostic plots using the plot() function. Choose the plots 1, 2 and 5
par(mfrow = c(2,2))
plot(my_model, which=c(1,2,5))
new_model <- lm(points ~ attitude, data = learning2014)
anova(new_model, my_model)
?anova
learning2014 %>%
lmtest::bptest()
install.packages("lmtest")
library(lmtest)
learning2014 %>%
lmtest::bptest()
my_model %>%
lmtest::bptest()
lmtest::bptest
new_model %>%
lmtest::bptest()
new_model %>%
lmtest::bptest() -> bpresults
bpresults$p.value
bptest(new_model, ~ points + I(c(points)^2), data = learning2014)
plot()
bptest(new_model, ~ attitude + I(c(attitude)^2), data = learning2014)
bptest(new_model, ~ attitude + I(attitude)^2, data = learning2014)
bptest(new_model, ~ attitude + I(attitude^2), data = learning2014)
resettest(formula = points ~ attitude, power = 2, data = learning2014)
resettest(formula = points ~ attitude, power = 2:3, data = learning2014)
learning2014 %>% corrplot(order = "FPC", method = "number")
install.packages("corrplot")
library(corrplot)
learning2014 %>% corrplot(order = "FPC", method = "number")
learning2014 %>% cov2cor()  %>% corrplot(order = "FPC", method = "number")
var(learning2014) %>% cov2cor()  %>% corrplot(order = "FPC", method = "number")
var(learning2014, na.rm =TRUE) %>% cov2cor()  %>% corrplot(order = "FPC", method = "number")
learning2014 %>% ggplot(aes(x = factor(gender), y = points, color = gender))  + geom_violin() + geom_boxplot() + xlab("Male = 1") + ggtitle("Male and female points")
install.packages("car")
linearHypothesis(my_model,  c("stra = 0", "surf = 0"))
install.packages("car")
library("car", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
linearHypothesis(my_model,  c("stra = 0", "surf = 0"))
summary(learning2014)
ss_results<- linearHypothesis(my_model,  c("stra = 0", "surf = 0"))
print(ss_results)
ss_results$`Pr(>F)`
ss_results$`Pr(>F)`[2]
round(ss_results$`Pr(>F)`[2], digits=2)
round(ss_results$`Pr(>F)`[2], digits=3)
